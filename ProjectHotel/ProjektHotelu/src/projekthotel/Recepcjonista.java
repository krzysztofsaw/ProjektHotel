/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projekthotel;

import java.awt.Color;
import java.io.IOException;
import java.time.LocalDate;
import java.time.format.DateTimeParseException;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author użytkownik
 */
public class Recepcjonista extends javax.swing.JFrame {

    Pracownik pracownik;
    String login;
    List<Rezerwacja> listaRezerwacji = null;
    List<PokojRezerwacja> listaPokoiRezerwacji = null;
    List<Pokoj> listaPokoji = null;
    DefaultTableModel model;

    /**
     * Creates new form Recepcjonista
     */
    public Recepcjonista(Pracownik pracownik) {
        this.pracownik = pracownik;
        initComponents();
        model = (DefaultTableModel) jTable2.getModel();
        aktualizuj();
        odswiez();
        jLabel2.setText("Stan: Ok");
        jLabel2.setForeground(Color.GREEN);
        //     jLabel6.setText("Witaj: " + data.getLogin());   
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton6 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        BACKGROUND = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Hotel");
        setLocation(new java.awt.Point(400, 300));
        setMinimumSize(new java.awt.Dimension(1125, 596));
        setResizable(false);
        setSize(new java.awt.Dimension(1160, 590));
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Recepcjonista");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(490, 20, 110, 26);

        jButton3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton3.setText("wyloguj");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3);
        jButton3.setBounds(950, 460, 150, 80);

        jButton8.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton8.setText("Usuń wszystko");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton8);
        jButton8.setBounds(460, 430, 180, 60);

        jButton5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton5.setText("Nowa rezerwacja");
        jButton5.setIconTextGap(20);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5);
        jButton5.setBounds(30, 390, 210, 60);

        jTable2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "haslo", "imie", "nazwisko", "pesel", "poczatek", "koniec", "Rachunek", "Pokoj"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jTable2MouseEntered(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTable2MouseReleased(evt);
            }
        });
        jTable2.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                jTable2CaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                jTable2InputMethodTextChanged(evt);
            }
        });
        jTable2.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTable2PropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(jTable2);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 60, 1090, 320);

        jButton6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton6.setText("Commit");
        jButton6.setIconTextGap(20);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton6);
        jButton6.setBounds(680, 390, 220, 70);

        jLabel2.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 0, 0));
        jLabel2.setText("stan: ");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(720, 20, 340, 30);

        jButton7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton7.setText("Odczytaj z BazySQL");
        jButton7.setIconTextGap(20);
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton7);
        jButton7.setBounds(680, 470, 220, 70);

        jButton9.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton9.setText("Wczytaj");
        jButton9.setIconTextGap(20);
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton9);
        jButton9.setBounds(260, 470, 180, 60);

        jButton10.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton10.setText("Zapisz");
        jButton10.setIconTextGap(20);
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton10);
        jButton10.setBounds(30, 470, 210, 60);

        jButton11.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton11.setText("Usuń");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton11);
        jButton11.setBounds(260, 390, 180, 60);

        BACKGROUND.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        BACKGROUND.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/tlo_rec.jpg"))); // NOI18N
        BACKGROUND.setText("jLabel2");
        BACKGROUND.setMinimumSize(new java.awt.Dimension(1160, 590));
        BACKGROUND.setPreferredSize(new java.awt.Dimension(1160, 590));
        BACKGROUND.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                BACKGROUNDPropertyChange(evt);
            }
        });
        getContentPane().add(BACKGROUND);
        BACKGROUND.setBounds(0, 0, 1160, 590);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        this.dispose();
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WindowLogged().setVisible(true);
            }
        });


    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        usunWszystko();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

        addEmptyRow();
        zapisz();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        zapisz();
        commit();
        

    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        aktualizuj();
        odswiez();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed

        odswiez();
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        zapisz();

    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        int test = 0;

        for (int i = 0; i < model.getRowCount(); i++) {
            if (jTable2.isRowSelected(i)) {
                test = 1;
            }
        }

        if (test == 1) {
            usun(jTable2.getSelectedRow());
        }


    }//GEN-LAST:event_jButton11ActionPerformed

    private void BACKGROUNDPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_BACKGROUNDPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_BACKGROUNDPropertyChange

    private void jTable2PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTable2PropertyChange

    }//GEN-LAST:event_jTable2PropertyChange

    private void jTable2InputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jTable2InputMethodTextChanged
        jLabel2.setText("Stan: Niezapisany");
        jLabel2.setForeground(Color.red);

    }//GEN-LAST:event_jTable2InputMethodTextChanged

    private void jTable2CaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jTable2CaretPositionChanged

    }//GEN-LAST:event_jTable2CaretPositionChanged

    private void jTable2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseEntered

    }//GEN-LAST:event_jTable2MouseEntered

    private void jTable2MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseReleased
        jLabel2.setText("Stan: Niezapisany");
        jLabel2.setForeground(Color.red);
    }//GEN-LAST:event_jTable2MouseReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Recepcjonista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Recepcjonista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Recepcjonista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Recepcjonista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Recepcjonista(null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BACKGROUND;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables

    void setLogin(String l) {
        login = l;

    }

    void commit() {
        try {
            int stan;
            OdwzorujListy bombel = new OdwzorujListy(listaPokoiRezerwacji, listaRezerwacji);
            System.out.println("zawartosc test:" + bombel.getRezerwacja());

            ServerConnection.getInstance().getOutputStream().writeObject(bombel);
            stan = (int) ServerConnection.getInstance().getInputStream().readObject();
            switch (stan) {
                case 0:
                    JOptionPane.showMessageDialog(rootPane, "Baza zostala uaktualniona pomyslnie", "Sukces", JOptionPane.INFORMATION_MESSAGE);
                    break;
                case -1:
                    JOptionPane.showMessageDialog(rootPane, "Blad tworzenie Rezerwacji", "Blad", JOptionPane.ERROR_MESSAGE);
                    break;
                case -2:
                    JOptionPane.showMessageDialog(rootPane, "Baza zostala uaktualniona \nNie istnieja niektore pokoje o podanych id \nlub terminy rezerwacji tego samego pokoju sie pokrywaja", "Sukces", JOptionPane.INFORMATION_MESSAGE);
                    break;
                default:
                    JOptionPane.showMessageDialog(rootPane, "Blad!!!", "Blad", JOptionPane.ERROR_MESSAGE);
                    break;
            }

        } catch (IOException ex) {

        } catch (ClassNotFoundException ex) {

        }

        aktualizuj();
        odswiez();
    }

    void odswiez() {
        usunWszystko();
        //model = (DefaultTableModel) jTable2.getModel();
        Object rowData[] = new Object[9];
        for (int i = 0; i < listaRezerwacji.size(); i++) {
            rowData[0] = listaRezerwacji.get(i).getId();
            rowData[1] = listaRezerwacji.get(i).getHaslo();
            rowData[2] = listaRezerwacji.get(i).getImie();
            rowData[3] = listaRezerwacji.get(i).getNazwisko();
            rowData[4] = listaRezerwacji.get(i).getPesel();
            rowData[5] = listaRezerwacji.get(i).getStringPoczatekOdwrocony();
            rowData[6] = listaRezerwacji.get(i).getStringKoniecOdwrocony();
            rowData[7] = listaRezerwacji.get(i).getRachunek();
            rowData[8] = IdPokojGosciaZarezerwowany(i);
            model.addRow(rowData);

        }
    }

    void usunWszystko() {

        int ilosc = model.getRowCount();
        for (int i = 0; i < ilosc; i++) {

            model.removeRow(0);
        }
    }

    void usun(int id) {
        model.removeRow(id);

    }

    void addEmptyRow() {

        Object rowData[] = new Object[9];
        rowData[0] = maxAddOne();
        rowData[1] = "";
        rowData[2] = "";
        rowData[3] = "";
        rowData[4] = "";
        rowData[5] = "2018-02-05";
        rowData[6] = "2018-02-07";
        rowData[7] = "0";
        rowData[8] = "0";

        model.addRow(rowData);
    }

    int maxAddOne() {
        int ilosc = listaRezerwacji.size();

        if (ilosc == 0) {
            return 0;
        }

        int max = listaRezerwacji.get(0).getId();
        for (int i = 0; i < ilosc; i++) {
            if (max < listaRezerwacji.get(i).getId()) {

                max = listaRezerwacji.get(i).getId();

            }
        }
        return max + 1;
    }

    String IdPokojGosciaZarezerwowany(int nrGoscia) {
        for (int i = 0; i < listaPokoiRezerwacji.size(); i++) {
            if (listaPokoiRezerwacji.get(i).getIdGosc() == nrGoscia) {
                return "" + listaPokoiRezerwacji.get(i).getIdPokoj();
            }
        }
        return "BRAK POKOJU";
    }

    void aktualizuj() {

        try {

            DownloadWszystkoPobyty bombel = new DownloadWszystkoPobyty(pracownik.getLogin(), pracownik.getHaslo());
            ServerConnection.getInstance().getOutputStream().writeObject(bombel);
            listaRezerwacji = (List<Rezerwacja>) ServerConnection.getInstance().getInputStream().readObject();
            listaPokoiRezerwacji = (List<PokojRezerwacja>) ServerConnection.getInstance().getInputStream().readObject();

        } catch (IOException | ClassNotFoundException ex) {
        }
        
    }

    void zapisz() {
        listaRezerwacji.clear();
        listaPokoiRezerwacji.clear();
        int ilosc = model.getRowCount();
        for (int i = 0; i < ilosc; i++) {

            GregorianCalendar start_rp = new GregorianCalendar();
            GregorianCalendar koniec_rp = new GregorianCalendar();
            LocalDate ld1;
            LocalDate ld2;
            int rachunek;
            int nr;

            try {
                ld1 = LocalDate.parse("" + model.getValueAt(i, 5));
                ld2 = LocalDate.parse("" + model.getValueAt(i, 6));
                rachunek = Integer.parseInt("" + model.getValueAt(i, 7));

            } catch (DateTimeParseException ex) {
                JOptionPane.showMessageDialog(rootPane, "Niewlaciwy format daty\n prawidłowy ro: odw-mm-dd", "Błąd", JOptionPane.ERROR_MESSAGE);
                return;
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(rootPane, "Rachunek musi byc liczba", "Błąd", JOptionPane.ERROR_MESSAGE);
                return;
            }

            start_rp.set(ld1.getYear(), ld1.getMonthValue(), ld1.getDayOfMonth());
            koniec_rp.set(ld2.getYear(), ld2.getMonthValue(), ld2.getDayOfMonth());
            PokojRezerwacja pr = null;
            try {
                nr = Integer.parseInt("" + model.getValueAt(i, 8));
                pr = new PokojRezerwacja(0, i, nr, start_rp, koniec_rp);
            } catch (NumberFormatException ex) {

            }
            int id = Integer.parseInt("" + model.getValueAt(i, 0));
            //lista.add(new PokojRezerwacja(wynik.getInt(1), wynik.getInt(2), wynik.getInt(3), start_rp, koniec_rp));
            Rezerwacja rez = new Rezerwacja(id, "" + model.getValueAt(i, 1), "" + model.getValueAt(i, 2), "" + model.getValueAt(i, 3), "" + model.getValueAt(i, 4), start_rp, koniec_rp, rachunek);

            listaRezerwacji.add(rez);
            if (pr != null) {
                listaPokoiRezerwacji.add(pr);
            }
        }

        jLabel2.setText("Stan: Ok");
        jLabel2.setForeground(Color.GREEN);

    }

}
